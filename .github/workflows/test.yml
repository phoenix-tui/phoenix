name: Tests

# Testing Strategy:
# - Tests run on Linux, macOS, and Windows (cross-platform TUI framework)
# - Phoenix TUI Framework must work on all major platforms
# - Go 1.25+ required (matches go.mod requirement)
# - Multi-module monorepo: Each module tested independently with GOWORK=off
#
# Branch Strategy (Git Flow):
# - release/** branches: Pre-release testing (test here BEFORE merging to main)
# - main branch: Production-ready code only (protected)
# - develop branch: Active development (default for PRs)
# - Pull requests: Must pass all tests before merge

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'  # Test release branches before merging to main
  pull_request:
    branches:
      - main
      - develop
      - 'release/**'

env:
  GOWORK: off  # Disable workspace mode in CI (workspaces are for local dev only)

jobs:
  # Unit tests - Cross-platform
  unit-tests:
    name: Unit Tests - ${{ matrix.os }} - Go ${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.25']  # Match go.mod requirement

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: "**/go.sum"  # Cache all modules

    - name: Download dependencies
      shell: bash
      run: |
        for dir in clipboard components core layout mouse render style tea terminal testing; do
          echo "==> Downloading dependencies for $dir"
          (cd $dir && go mod download)
        done

    - name: Verify dependencies
      shell: bash
      run: |
        for dir in clipboard components core layout mouse render style tea terminal testing; do
          echo "==> Verifying dependencies for $dir"
          (cd $dir && go mod verify)
        done

    - name: Run go vet
      shell: bash
      run: |
        for dir in clipboard components core layout mouse render style tea terminal testing; do
          echo "==> Running go vet on $dir"
          # Exclude examples and benchmarks directories (test-only packages)

          # Special case for clipboard: Disable unsafeptr checks (Windows syscall false positives)
          # See clipboard/.golangci.yml and clipboard/infrastructure/native/clipboard_windows.go for details
          if [ "$dir" = "clipboard" ]; then
            (cd $dir && go vet -unsafeptr=false $(go list ./... | grep -v "/examples" | grep -v "/benchmarks"))
          else
            (cd $dir && go vet $(go list ./... | grep -v "/examples" | grep -v "/benchmarks"))
          fi
        done

    - name: Build all packages
      shell: bash
      run: |
        # Phoenix has test-only packages (no .go files, only _test.go):
        # - render/benchmarks/ (performance_test.go)
        # - style/ root (integration_test.go)
        # - style/domain/ (spacing_integration_test.go)
        # These are INTENTIONAL and follow Go best practices.
        # We filter them out before building to avoid "no non-test Go files" errors.

        for dir in clipboard components core layout mouse render style tea terminal testing; do
          echo "==> Building $dir"
          cd $dir

          # Get buildable packages (must have .go files, exclude examples/benchmarks)
          BUILDABLE=$(go list -f '{{if (and (or .GoFiles .CgoFiles) (not .Module))}}{{.ImportPath}}{{end}}' ./... 2>/dev/null | \
                      grep -v "/examples" | \
                      grep -v "/benchmarks" || true)

          if [ -n "$BUILDABLE" ]; then
            echo "Building: $BUILDABLE"
            go build -v $BUILDABLE
          else
            echo "No buildable packages (test-only or meta module)"
          fi

          cd ..
        done

    - name: Run unit tests with race detector
      shell: bash
      run: |
        # Initialize combined coverage
        echo "mode: atomic" > coverage.txt

        for dir in clipboard components core layout mouse render style tea terminal testing; do
          echo "==> Testing $dir"
          (cd $dir && go test -v -race -coverprofile=coverage.out -covermode=atomic $(go list ./... | grep -v "/examples") && \
           if [ -f coverage.out ]; then tail -n +2 coverage.out >> ../coverage.txt; rm coverage.out; fi)
        done

    - name: Check coverage
      shell: bash
      run: |
        echo "Coverage report:"
        # Calculate total coverage percentage from coverage.txt
        # Format: "github.com/phoenix-tui/phoenix/module/file.go:line.col,line.col statements coverage"
        # Example: "github.com/phoenix-tui/phoenix/tea/api/tea.go:10.1,12.2 1 1"
        total_statements=$(awk 'NR > 1 {total += $2} END {print total}' coverage.txt)
        covered_statements=$(awk 'NR > 1 {covered += $3} END {print covered}' coverage.txt)
        if [ "$total_statements" -gt 0 ]; then
          coverage=$(awk "BEGIN {printf \"%.1f\", ($covered_statements / $total_statements) * 100}")
          echo "Total coverage: ${coverage}% (${covered_statements}/${total_statements} statements)"
        else
          echo "No coverage data found"
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking during beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'
        cache: true
        cache-dependency-path: "**/go.sum"

    - name: Run golangci-lint on each module
      shell: bash
      run: |
        for dir in clipboard components core layout mouse render style tea terminal testing; do
          echo "==> Linting $dir"
          (cd $dir && golangci-lint run --timeout=5m ./...) || echo "Lint failed for $dir (non-blocking)"
        done

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'
        cache: true
        cache-dependency-path: "**/go.sum"

    - name: Run benchmarks
      shell: bash
      run: |
        for dir in core render layout; do
          echo "==> Running benchmarks for $dir"
          (cd $dir && go test -bench=. -benchmem $(go list ./... | grep -v "/examples") 2>&1 | grep -E "(^Benchmark|^PASS|^FAIL)")
        done

  # Formatting check
  formatting:
    name: Code Formatting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'
        cache: true

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "ERROR: The following files are not formatted:"
          gofmt -l .
          echo ""
          echo "Run 'gofmt -w .' to fix formatting issues."
          exit 1
        fi
        echo "All files are properly formatted âœ“"
